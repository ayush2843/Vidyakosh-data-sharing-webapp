<% include partials/header %>

    <style>
        .inline-code {
            padding: 1px 5px;
            background: #eee;
            border-radius: 2px;
        }
        
        pre {
            padding: 15px 10px;
            font-size: .9em;
            color: #555;
            background: #edf3f8;
        }
        
        pre i {
            color: #aaa;
        }
        /* comments */
        
        pre b {
            font-weight: normal;
            color: #cf4b25;
        }
        /* strings */
        
        pre em {
            color: #0c59e9;
        }
        
        input[type="text"] {}
        
        .autocomplete-suggestions {
            text-align: left;
            cursor: default;
            border: 1px solid #ccc;
            border-top: 0;
            background: #fff;
            box-shadow: -1px 1px 3px rgba(0, 0, 0, .1);
            /* core styles should not be changed */
            position: absolute;
            display: none;
            z-index: 9999;
            max-height: 254px;
            overflow: hidden;
            overflow-y: auto;
            box-sizing: border-box;
        }
        
        .autocomplete-suggestion {
            position: relative;
            padding: 0 .6em;
            line-height: 23px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            font-size: 1.02em;
            color: #333;
        }
        
        .autocomplete-suggestion b {
            font-weight: normal;
            color: #1f8dd6;
        }
        
        .autocomplete-suggestion.selected {
            background: #f0f0f0;
        }
    </style>
    </head>

    <body>
        <div style="max-width:900px;margin:auto;padding:0 10px 50px">
            <div class="container">
                <div class="form-container">
                    <p class="form-title">Search Course</p>
                    <hr class="account-form__line">
                    <form method="POST" action="/result">
                        <div class="form-group">
                            <label>Course Name</label>
                            <input id="hero-demo" class="form-text" autofocus type="text" name="name" placeholder="Course Name or Title">
                        </div>
                        <button type="submit" class="btn btn-new btn-large shadow">Submit</button>
                    </form>
                </div>
            </div>

            <script src="https://code.jquery.com/jquery-1.11.1.min.js"></script>
            <script src="jquery.auto-complete.js"></script>
            <script>
                (function($) {
                    $.fn.autoComplete = function(options) {
                        var o = $.extend({}, $.fn.autoComplete.defaults, options);

                        // public methods
                        if (typeof options == 'string') {
                            this.each(function() {
                                var that = $(this);
                                if (options == 'destroy') {
                                    $(window).off('resize.autocomplete', that.updateSC);
                                    that.off('blur.autocomplete focus.autocomplete keydown.autocomplete keyup.autocomplete');
                                    if (that.data('autocomplete'))
                                        that.attr('autocomplete', that.data('autocomplete'));
                                    else
                                        that.removeAttr('autocomplete');
                                    $(that.data('sc')).remove();
                                    that.removeData('sc').removeData('autocomplete');
                                }
                            });
                            return this;
                        }

                        return this.each(function() {
                            var that = $(this);
                            // sc = 'suggestions container'
                            that.sc = $('<div class="autocomplete-suggestions ' + o.menuClass + '"></div>');
                            that.data('sc', that.sc).data('autocomplete', that.attr('autocomplete'));
                            that.attr('autocomplete', 'off');
                            that.cache = {};
                            that.last_val = '';

                            that.updateSC = function(resize, next) {
                                that.sc.css({
                                    top: that.offset().top + that.outerHeight(),
                                    left: that.offset().left,
                                    width: that.outerWidth()
                                });
                                if (!resize) {
                                    that.sc.show();
                                    if (!that.sc.maxHeight) that.sc.maxHeight = parseInt(that.sc.css('max-height'));
                                    if (!that.sc.suggestionHeight) that.sc.suggestionHeight = $('.autocomplete-suggestion', that.sc).first().outerHeight();
                                    if (that.sc.suggestionHeight)
                                        if (!next) that.sc.scrollTop(0);
                                        else {
                                            var scrTop = that.sc.scrollTop(),
                                                selTop = next.offset().top - that.sc.offset().top;
                                            if (selTop + that.sc.suggestionHeight - that.sc.maxHeight > 0)
                                                that.sc.scrollTop(selTop + that.sc.suggestionHeight + scrTop - that.sc.maxHeight);
                                            else if (selTop < 0)
                                                that.sc.scrollTop(selTop + scrTop);
                                        }
                                }
                            }
                            $(window).on('resize.autocomplete', that.updateSC);

                            that.sc.appendTo('body');

                            that.sc.on('mouseleave', '.autocomplete-suggestion', function() {
                                $('.autocomplete-suggestion.selected').removeClass('selected');
                            });

                            that.sc.on('mouseenter', '.autocomplete-suggestion', function() {
                                $('.autocomplete-suggestion.selected').removeClass('selected');
                                $(this).addClass('selected');
                            });

                            that.sc.on('mousedown click', '.autocomplete-suggestion', function(e) {
                                var item = $(this),
                                    v = item.data('val');
                                if (v || item.hasClass('autocomplete-suggestion')) { // else outside click
                                    that.val(v);
                                    o.onSelect(e, v, item);
                                    that.sc.hide();
                                }
                                return false;
                            });

                            that.on('blur.autocomplete', function() {
                                try {
                                    over_sb = $('.autocomplete-suggestions:hover').length;
                                } catch (e) {
                                    over_sb = 0;
                                } // IE7 fix :hover
                                if (!over_sb) {
                                    that.last_val = that.val();
                                    that.sc.hide();
                                    setTimeout(function() {
                                        that.sc.hide();
                                    }, 350); // hide suggestions on fast input
                                } else if (!that.is(':focus')) setTimeout(function() {
                                    that.focus();
                                }, 20);
                            });

                            if (!o.minChars) that.on('focus.autocomplete', function() {
                                that.last_val = '\n';
                                that.trigger('keyup.autocomplete');
                            });

                            function suggest(data) {
                                var val = that.val();
                                that.cache[val] = data;
                                if (data.length && val.length >= o.minChars) {
                                    var s = '';
                                    for (var i = 0; i < data.length; i++) s += o.renderItem(data[i], val);
                                    that.sc.html(s);
                                    that.updateSC(0);
                                } else
                                    that.sc.hide();
                            }

                            that.on('keydown.autocomplete', function(e) {
                                // down (40), up (38)
                                if ((e.which == 40 || e.which == 38) && that.sc.html()) {
                                    var next, sel = $('.autocomplete-suggestion.selected', that.sc);
                                    if (!sel.length) {
                                        next = (e.which == 40) ? $('.autocomplete-suggestion', that.sc).first() : $('.autocomplete-suggestion', that.sc).last();
                                        that.val(next.addClass('selected').data('val'));
                                    } else {
                                        next = (e.which == 40) ? sel.next('.autocomplete-suggestion') : sel.prev('.autocomplete-suggestion');
                                        if (next.length) {
                                            sel.removeClass('selected');
                                            that.val(next.addClass('selected').data('val'));
                                        } else {
                                            sel.removeClass('selected');
                                            that.val(that.last_val);
                                            next = 0;
                                        }
                                    }
                                    that.updateSC(0, next);
                                    return false;
                                }
                                // esc
                                else if (e.which == 27) that.val(that.last_val).sc.hide();
                                // enter or tab
                                else if (e.which == 13 || e.which == 9) {
                                    var sel = $('.autocomplete-suggestion.selected', that.sc);
                                    if (sel.length && that.sc.is(':visible')) {
                                        o.onSelect(e, sel.data('val'), sel);
                                        setTimeout(function() {
                                            that.sc.hide();
                                        }, 20);
                                    }
                                }
                            });

                            that.on('keyup.autocomplete', function(e) {
                                if (!~$.inArray(e.which, [13, 27, 35, 36, 37, 38, 39, 40])) {
                                    var val = that.val();
                                    if (val.length >= o.minChars) {
                                        if (val != that.last_val) {
                                            that.last_val = val;
                                            clearTimeout(that.timer);
                                            if (o.cache) {
                                                if (val in that.cache) {
                                                    suggest(that.cache[val]);
                                                    return;
                                                }
                                                // no requests if previous suggestions were empty
                                                for (var i = 1; i < val.length - o.minChars; i++) {
                                                    var part = val.slice(0, val.length - i);
                                                    if (part in that.cache && !that.cache[part].length) {
                                                        suggest([]);
                                                        return;
                                                    }
                                                }
                                            }
                                            that.timer = setTimeout(function() {
                                                o.source(val, suggest)
                                            }, o.delay);
                                        }
                                    } else {
                                        that.last_val = val;
                                        that.sc.hide();
                                    }
                                }
                            });
                        });
                    }

                    $.fn.autoComplete.defaults = {
                        source: 0,
                        minChars: 3,
                        delay: 150,
                        cache: 1,
                        menuClass: '',
                        renderItem: function(item, search) {
                            // escape special characters
                            search = search.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
                            var re = new RegExp("(" + search.split(' ').join('|') + ")", "gi");
                            return '<div class="autocomplete-suggestion" data-val="' + item + '">' + item.replace(re, "<b>$1</b>") + '</div>';
                        },
                        onSelect: function(e, term, item) {}
                    };
                }(jQuery));
                $(function() {
                    $('#hero-demo').autoComplete({
                        minChars: 1,
                        source: function(term, suggest) {
                            term = term.toLowerCase();
                            var choices = ['CH 201', 'ES 242', 'ES 112', 'PH 102', 'MA 202 Mathematics IV', 'BE 101 Introduction to Biology', 'ES215 Discrete maths', 'ES215 computer Architecture ', 'Hs201 World Civilization and History'];
                            var suggestions = [];
                            for (i = 0; i < choices.length; i++)
                                if (~choices[i].toLowerCase().indexOf(term)) suggestions.push(choices[i]);
                            suggest(suggestions);
                        }
                    });
                    $('#advanced-demo').autoComplete({
                        minChars: 0,
                        source: function(term, suggest) {
                            term = term.toLowerCase();
                            var choices = [
                                ['Australia', 'au'],
                                ['Austria', 'at'],
                                ['Brasil', 'br'],
                                ['Bulgaria', 'bg'],
                                ['Canada', 'ca'],
                                ['China', 'cn'],
                                ['Czech Republic', 'cz'],
                                ['Denmark', 'dk'],
                                ['Finland', 'fi'],
                                ['France', 'fr'],
                                ['Germany', 'de'],
                                ['Hungary', 'hu'],
                                ['India', 'in'],
                                ['Italy', 'it'],
                                ['Japan', 'ja'],
                                ['Netherlands', 'nl'],
                                ['Norway', 'no'],
                                ['Portugal', 'pt'],
                                ['Romania', 'ro'],
                                ['Russia', 'ru'],
                                ['Spain', 'es'],
                                ['Swiss', 'ch'],
                                ['Turkey', 'tr'],
                                ['USA', 'us']
                            ];
                            var suggestions = [];
                            for (i = 0; i < choices.length; i++)
                                if (~(choices[i][0] + ' ' + choices[i][1]).toLowerCase().indexOf(term)) suggestions.push(choices[i]);
                            suggest(suggestions);
                        },
                        renderItem: function(item, search) {
                            search = search.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
                            var re = new RegExp("(" + search.split(' ').join('|') + ")", "gi");
                            return '<div class="autocomplete-suggestion" data-langname="' + item[0] + '" data-lang="' + item[1] + '" data-val="' + search + '"><img src="img/' + item[1] + '.png"> ' + item[0].replace(re, "<b>$1</b>") + '</div>';
                        },
                        onSelect: function(e, term, item) {
                            console.log('Item "' + item.data('langname') + ' (' + item.data('lang') + ')" selected by ' + (e.type == 'keydown' ? 'pressing enter or tab' : 'mouse click') + '.');
                            $('#advanced-demo').val(item.data('langname') + ' (' + item.data('lang') + ')');
                            console.log("q")
                        }
                    });
                });

                if (~window.location.href.indexOf('http')) {
                    (function() {
                        var po = document.createElement('script');
                        po.type = 'text/javascript';
                        po.async = true;
                        po.src = 'https://apis.google.com/js/plusone.js';
                        var s = document.getElementsByTagName('script')[0];
                        s.parentNode.insertBefore(po, s);
                    })();
                    (function(d, s, id) {
                        var js, fjs = d.getElementsByTagName(s)[0];
                        if (d.getElementById(id)) return;
                        js = d.createElement(s);
                        js.id = id;
                        js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.4&appId=114593902037957";
                        fjs.parentNode.insertBefore(js, fjs);
                    }(document, 'script', 'facebook-jssdk'));
                    ! function(d, s, id) {
                        var js, fjs = d.getElementsByTagName(s)[0],
                            p = /^http:/.test(d.location) ? 'http' : 'https';
                        if (!d.getElementById(id)) {
                            js = d.createElement(s);
                            js.id = id;
                            js.src = p + '://platform.twitter.com/widgets.js';
                            fjs.parentNode.insertBefore(js, fjs);
                        }
                    }(document, 'script', 'twitter-wjs');
                    $('#github_social').html('\
                <iframe style="float:left;margin-right:15px" src="//ghbtns.com/github-btn.html?user=Pixabay&repo=jQuery-autoComplete&type=watch&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="110" height="20"></iframe>\
                <iframe style="float:left;margin-right:15px" src="//ghbtns.com/github-btn.html?user=Pixabay&repo=jQuery-autoComplete&type=fork&count=true" allowtransparency="true" frameborder="0" scrolling="0" width="110" height="20"></iframe>\
            ');
                }
            </script>

    </body>

    </html>